////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Title:           P9VendingMachine
// Files:           VendingMachine.java
// Course:          CS 300 FALL 2017
//
// Author:          Yang, Sichao
// Email:           syang456@wisc.edu
// Lecturer's Name: Gary Dahl
//
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * @author Yang, Sichao
 *
 */
public class VendingMachine {
    private Item[] items;  // store items in a min-heap
    private int itemCount = 0; // number of items in this heap
    
    public VendingMachine(int capacity) {
        items = new Item[capacity];
    }
    
    private int getParent(int childIndex) {
        // return the parent index of the given child index 
        return (childIndex - 1) >> 1;
    }
     
    private int getLeftChild(int parentIndex) {
        // return the left child index of the given parent index
        return (parentIndex << 1) + 1;
    }
     
    private int getRightChild(int parentIndex) {
        // return the right child index of the given parent index
        return (parentIndex << 1) + 1;
    }
     
    private void swap(int itemOneIndex, int itemTwoIndex) {
        // swaps the Item references at itemOneIndex and itemTwoIndex in the items array
        Item temp = items[itemOneIndex];
        items[itemOneIndex] = items[itemTwoIndex];
        items[itemTwoIndex] = temp;
    }
     
    private void addHelper(int index) {
        // Propagates the min-heap order property from the node at position index,
        // up through it's ancestor nodes. Assumes that only the node at position
        // index may be in violation of this property. This is useful when adding
        // a new item to the bottom of the heap.
        if (index == 0) return;
        if (items[index].getExpirationDay() < items[getParent(index)].getExpirationDay())
            swap(index, getParent(index));
        addHelper(getParent(index));
    }
     
    private void removeHelper(int index) {
        // Propagates the min-heap order property from the node at position index,
        // down through it's highest priority descendant nodes. Assumes that the
        // children of the node at position index conform to this heap property. 
        // This is useful when removing an item from the top of the heap.
        if (itemCount <= getLeftChild(index)) return;
        int child = items[getLeftChild(index)].getExpirationDay() < items[getRightChild(index)].getExpirationDay() ? getLeftChild(index) : getRightChild(index);
        if (items[child].getExpirationDay() < items[index].getExpirationDay()) swap(index, child);
        removeHelper(child);
    }
    
    public void addItem(Item item) {
        // Add the given item to the items array and perform the necessary
        // actions to maintain the min-heap properties.
        if (itemCount == items.length) throw new IllegalStateException("WARNING: Item not added.  This vending machine is already filled to capacity.");
        items[itemCount] = item;
        addHelper(itemCount++);
    }

    public Item dispenseNextItem() {
        // Dispense the item with the smallest expiration date from this 
        // vending machine, while maintaining the min-heap properties.
        // This method removes the item returned from the heap.
        return dispenseItemAtIndex(0);
    }
         
    public Item getNextItem() {
        // This method returns a reference to the next item that will be dispensed.
        // This method does NOT change the state of the Vending Machine or its heap.
        return getItemAtIndex(0);
    }

    public Item dispenseItemAtIndex(int index) {
        // Dispense the item from a particular array index, while maintaining
        // the min-heap properties.  This method removes that item from the heap.
        // This index parameter assumes the top-index is zero.  So you'll need to
        // add one to this index, if you are using the top-index = 1 convention.
        if (itemCount == 0) throw new IllegalStateException("WARNING: Operation not allowed.  This vending machine is empty.");
        if (index < 0 || index >= itemCount) throw new IndexOutOfBoundsException("WARNING: Operation not allowed.  Index is invalid.");
        swap(index, --itemCount);
        removeHelper(index);
        return items[itemCount];
   }
    
    public Item getItemAtIndex(int index) {
        // This method returns a reference to the item at position index.
        // This method does not change the state of the vending machine.
        // This index parameter assumes the top-index is zero. So you'll need to 
        // add one to this index, if you are using the top-index = 1 convention.     
        if (itemCount == 0) throw new IllegalStateException("WARNING: Operation not allowed.  This vending machine is empty.");
        if (index < 0 || index >= itemCount) throw new IndexOutOfBoundsException("WARNING: Operation not allowed.  Index is invalid.");
        return items[index];
    }
    
    public String toString() {
        String string = "";
        for (int i = 0; i < itemCount; i++) string += items[i].getDescription() + " ";
        return string;
    }
}
