////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source: UVa 11340 - Newspaper
// Author: Yang, Sichao
// Email:  sichao@cs.wisc.edu
//
////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Reference: https://www.redgreencode.com/solving-uva-11340-in-java/
//
////////////////////////////////////////////////////////////////////////////////////////////////////
package _1D_Array_Manipulation;

import java.io.*;
import java.util.HashMap;

/**
 * Hashing
 */
public class UVa11340Newspaper {
    public static void main(String[] args) throws IOException {
        // Tricky point here: an 8-bit character encoding is required for this problem.
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, "ISO-8859-1"), 10000);
        int N = Integer.parseInt(reader.readLine());
        while (N-- > 0) {
            // Hashmap can be slower than a 8-bit-char-indexed int array, but is still O(1) and fast
            // enough for this problem, as the true bottleneck is the input speed.
            HashMap<Character, Integer> map = new HashMap<>();
            int K = Integer.parseInt(reader.readLine());
            while (K-- > 0) {
                String line = reader.readLine();
                map.put(line.charAt(0), Integer.parseInt(line.substring(2).trim()));
            }
            long value = 0;
            int M = Integer.parseInt(reader.readLine());
            while (M-- > 0) {
                String line = reader.readLine();
                for (int i = 0; i < line.length(); i++)
                    value += map.getOrDefault(line.charAt(i), 0);
            }
            System.out.printf("%d.%02d$\n", value / 100, value % 100);
        }
        reader.close();
    }
}
