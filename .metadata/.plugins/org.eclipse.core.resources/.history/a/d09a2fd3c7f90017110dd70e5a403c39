////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source: Linear DS with Built-in Libraries, Data Structures and Libraries,
//         Competitive Programming 3: The New Lower Bound of Programming Contests, pp. 35-39
// Author: Yang, Sichao
// Email:  sichao@cs.wisc.edu
//
////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Stack;

public class Main {
    static <T extends Comparable<T>> boolean next_permutation(T[] perm) {
        if (perm.length < 2) return false; // Edge condition!
        int i = perm.length - 2, j = perm.length - 1;
        while (perm[i].compareTo(perm[i + 1]) >= 0) // Descending order
            if (i-- == 0) return false;
        while (perm[i].compareTo(perm[j]) >= 0) j--;
        T temp = perm[i]; perm[i] = perm[j]; perm[j] = temp;
        System.out.println(Arrays.toString(perm));
        for (i++, j = perm.length - 1; i < j; i++, j--) {
            temp = perm[i]; perm[i] = perm[j]; perm[j] = temp;
        }
        return true;
    }
    
    public static void main(String[] args) {
        // Static Array
        int[] array = new int[] {2, 3, 1};
        Arrays.sort(array); // sorting
        System.out.println(Arrays.toString(array)); // output
        for (int i = 0; i < 5; i++)
            System.out.println(Arrays.binarySearch(array, 0, 3, i)); // searching
        
        // Dynamically-Resizeable Array
        ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(2, 3, 1));
        Collections.sort(arrayList); // sorting
        Collections.reverse(arrayList);
        System.out.println(arrayList); // output
        for (int i = 0; i < 5; i++)
            System.out.println(Collections.binarySearch(arrayList, i, (p, q) -> q - p)); // searching
        
        // Array of Booleans
        BitSet bits = new BitSet(8);
        bits.clear();
        bits.set(1);
        bits.andNot(bits);
        System.out.println(bits.get(1));
        System.out.println(bits.cardinality());
        
        // Bitmask
        int bitmask = 0; // representation
        bitmask |= (1 << 3); // set bit
        System.out.println(bitmask & (1 << 3)); // check bit
        bitmask &= ~(1 << 3); // clear bit
        bitmask ^= ~(1 << 3); // flip bit
        System.out.println(bitmask & (-bitmask)); // get the least significant set bit
        bitmask = (1 << 10) - 1; // turn on 10 bits
        
        // Linked List | Queue | Double-ended Queue
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.addLast(1);
        linkedList.addFirst(-1);
        System.out.println(linkedList.pollFirst());
        System.out.println(linkedList.pollLast());
        
        // Stack
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        System.out.println(stack.pop());
        
        Integer[] perm = new Integer[] {1, 2, 2, 4, 5};
        while (next_permutation(perm))
            System.out.println(Arrays.toString(perm));
    }
}
