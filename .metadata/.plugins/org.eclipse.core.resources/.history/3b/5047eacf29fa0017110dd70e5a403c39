////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source: UVa 10901 - Ferry Loading III
// Author: Yang, Sichao
// Email:  sichao@cs.wisc.edu
//
////////////////////////////////////////////////////////////////////////////////////////////////////
package Java_Queue_and_Deque;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.LinkedList;

class Car {
    static int i;
    int index;
    int time;
    
    public Car(int t) {
        index = i++;
        time = t;
    }
}

public class UVa10901FerryLoadingIII {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1000);
        PrintWriter writer = new PrintWriter(System.out);
        
        int c = Integer.parseInt(reader.readLine());
        while (c-- > 0) {
            String[] ntm = reader.readLine().split(" ");
            int T = 0, n = Integer.parseInt(ntm[0]), t = Integer.parseInt(ntm[1]), m = Integer.parseInt(ntm[2]);
            int[] times = new int[m];
            LinkedList<Car> left = new LinkedList<>(), right = new LinkedList<>();
            Car.i = 0;
            while (m-- > 0) {
                String[] input = reader.readLine().split(" ");
                Car car = new Car(Integer.parseInt(input[0]));
                if (input[1].equals("left")) left.add(car);
                else right.add(car);
            }
            boolean onLeft = true;
            while (!left.isEmpty() || !right.isEmpty()) {
                T = Math.max(T, Math.min(left.isEmpty() ? Integer.MAX_VALUE : left.peek().time,
                                        right.isEmpty() ? Integer.MAX_VALUE : right.peek().time));
                writer.println("T: " + T);
                LinkedList<Car> side = onLeft ? left : right;
                for (int i = 0; i < n && !side.isEmpty() && side.peek().time <= T; i++)
                    times[side.poll().index] = T + t;
                T += t;
                onLeft = !onLeft;
            }
            for (Integer time : times) writer.println(time);
            writer.println();
        }
        
        reader.close();
        writer.close();
    }
}
