////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source: UVa 10172 - The Lonesome Cargo Distributor
// Author: Yang, Sichao
// Email:  sichao@cs.wisc.edu
//
////////////////////////////////////////////////////////////////////////////////////////////////////
package Java_Queue_and_Deque;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Stack;
import java.util.StringTokenizer;

@SuppressWarnings("serial")
class Queue extends LinkedList<Integer> {} // Java does not support generic arrays.

/**
 * Simulation with both stacks and queues.
 */
public class UVa10172TheLonesomeCargoDistributor {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1000);
        PrintWriter writer = new PrintWriter(System.out);
        
        int SET = Integer.parseInt(reader.readLine());
        while (SET-- > 0) {
            String[] NSQ = reader.readLine().split(" ");
            int t = 0, r = 0, N = Integer.parseInt(NSQ[0]), S = Integer.parseInt(NSQ[1]), Q = Integer.parseInt(NSQ[2]);
            Stack<Integer> stack = new Stack<>();
            Queue[] queues = new Queue[100];
            for (int i = 0; i < N; i++) {
                StringTokenizer tk = new StringTokenizer(reader.readLine());
                int Qi = Integer.parseInt(tk.nextToken());
                r += Qi;
                queues[i] = new Queue();
                while (Qi-- > 0) queues[i].add(Integer.parseInt(tk.nextToken()) - 1);
            }
            for (int i = 0; r > 0; t += 2, i = (i + 1) % N) {
                while (!stack.isEmpty()) {
                    if (stack.peek() == i) {
                        stack.pop();
                        r--;
                        t++;
                    } else if (queues[i].size() < Q) {
                        queues[i].add(stack.pop());
                        t++;
                    } else break;               
                }
                while (!queues[i].isEmpty() && stack.size() < S) {
                    stack.add(queues[i].poll());
                    t++;
                }
            }
            writer.println(t);
        }
        
        reader.close();
        writer.close();
    }
}
