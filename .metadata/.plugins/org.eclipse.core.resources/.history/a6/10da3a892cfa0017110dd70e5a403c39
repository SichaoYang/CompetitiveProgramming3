////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source: UVa 11034 - Ferry Loading IV
// Author: Yang, Sichao
// Email:  sichao@cs.wisc.edu
//
////////////////////////////////////////////////////////////////////////////////////////////////////
package Java_Queue_and_Deque;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.LinkedList;

/**
 * Simulation with queues.
 */
public class UVa11034FerryLoadingIV {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1000);
        PrintWriter writer = new PrintWriter(System.out);
        
        int c = Integer.parseInt(reader.readLine());
        while (c-- > 0) {
            String[] lm = reader.readLine().split(" ");
            int T = 0, l = Integer.parseInt(lm[0]), m = Integer.parseInt(lm[1]);
            LinkedList<Car2> left = new LinkedList<>(), right = new LinkedList<>();
            Car.i = 0;
            while (m-- > 0) {
                String[] input = reader.readLine().split(" ");
                Car2 car = new Car2(Integer.parseInt(input[0]));
                if (input[1].equals("left")) left.add(car);
                else right.add(car);
            }
            boolean onLeft = true;
            while (!left.isEmpty() || !right.isEmpty()) {
                LinkedList<Car2> side = onLeft ? left : right;
                for (int L = l; !side.isEmpty() && L > side.peek().len; L -= side.pop().len);
                T++;
                onLeft = !onLeft;
            }
            writer.println(T);
        }
        
        reader.close();
        writer.close();
    }
}